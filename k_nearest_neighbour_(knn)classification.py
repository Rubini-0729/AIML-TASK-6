# -*- coding: utf-8 -*-
"""K-NEAREST NEIGHBOUR (KNN)CLASSIFICATION

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_PfFNgrSGJLjNvgl7v1ayWqFXRXGKJBR
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np

# Load the uploaded CSV
df = pd.read_csv('Iris.csv')
df.head()

# Drop Id column if it exists
df = df.drop(columns=['Id'], errors='ignore')

# Check for nulls
print(df.isnull().sum())

# Encode target labels
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['Species'] = le.fit_transform(df['Species'])

# Split features and target
X = df.drop('Species', axis=1)
y = df['Species']

# Normalize features
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

from sklearn.model_selection import train_test_split

# Split into 80% train and 20% test
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

# Test different K values from 1 to 20
accuracies = []
k_values = range(1, 21)

for k in k_values:
    model = KNeighborsClassifier(n_neighbors=k)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    accuracies.append(acc)

# Plotting accuracy vs K
import matplotlib.pyplot as plt

plt.figure(figsize=(10,5))
plt.plot(k_values, accuracies, marker='o', linestyle='--', color='b')
plt.title('KNN Accuracy for Different K Values')
plt.xlabel('K Value')
plt.ylabel('Accuracy')
plt.grid(True)
plt.show()

# Choose the best K
best_k = accuracies.index(max(accuracies)) + 1
print(f"Best K value: {best_k}")

# Train final model
best_knn = KNeighborsClassifier(n_neighbors=best_k)
best_knn.fit(X_train, y_train)
y_best_pred = best_knn.predict(X_test)

from sklearn.metrics import confusion_matrix, classification_report

# Accuracy
print("Accuracy:", accuracy_score(y_test, y_best_pred))

# Confusion matrix
print("Confusion Matrix:\n", confusion_matrix(y_test, y_best_pred))

# Classification report
print("Classification Report:\n", classification_report(y_test, y_best_pred))

# Use only first 2 features for 2D visualization
X_2d = X_scaled[:, :2]
X_train_2d, X_test_2d, y_train_2d, y_test_2d = train_test_split(X_2d, y, test_size=0.2, random_state=42)

# Train on 2D
knn_2d = KNeighborsClassifier(n_neighbors=best_k)
knn_2d.fit(X_train_2d, y_train_2d)

# Create mesh grid
x_min, x_max = X_2d[:, 0].min() - 1, X_2d[:, 0].max() + 1
y_min, y_max = X_2d[:, 1].min() - 1, X_2d[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.02),
                     np.arange(y_min, y_max, 0.02))

Z = knn_2d.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)

# Plot decision boundaries
from matplotlib.colors import ListedColormap
import seaborn as sns

plt.figure(figsize=(10, 6))
plt.contourf(xx, yy, Z, cmap=ListedColormap(['#FFAAAA', '#AAFFAA', '#AAAAFF']), alpha=0.6)
sns.scatterplot(x=X_2d[:, 0], y=X_2d[:, 1], hue=y, palette='Set1', edgecolor='k')
plt.title("KNN Decision Boundaries (using first 2 features)")
plt.xlabel('Feature 1 (Standardized)')
plt.ylabel('Feature 2 (Standardized)')
plt.show()